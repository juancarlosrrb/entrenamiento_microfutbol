####Líneas de la cancha
    pygame.draw.rect(screen, black, (50, 50, screen_width - 100, screen_height - 100), 2)
    pygame.draw.rect(screen, black, (50, 50, 100, screen_height - 100), 2)
    pygame.draw.rect(screen, black, (screen_width - 150, 50, 100, screen_height - 100), 2)
    pygame.draw.rect(screen, black, (screen_width // 2 - 2, 50, 4, screen_height - 100), 2)##dimensiones cancha

import pygame
import sys

# Inicializar Pygame
pygame.init()

# Configuración de la pantalla
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Cancha de Fútbol Sala")

# Colores
white = (255, 255, 255)

# Bucle principal del juego
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Dibujar la cancha
    screen.fill(white)

    # Líneas de la cancha
    pygame.draw.rect(screen, white, (50, 50, screen_width - 100, screen_height - 100), 2)
    pygame.draw.rect(screen, white, (50, 50, 100, 200), 2)
    pygame.draw.rect(screen, white, (screen_width - 150, 50, 100, 200), 2)
    pygame.draw.arc(screen, white, (50, (screen_height / 2) - 50, 100, 100), 0, 3.14, 2)
    pygame.draw.arc(screen, white, (screen_width - 150, (screen_height / 2) - 50, 100, 100), 0, 3.14, 2)

    pygame.display.flip()

# Salir del programa
pygame.quit()
sys.exit()


##mover jugadores 
import pygame
import sys
import math

# Inicializar Pygame
pygame.init()

# Configuración de la pantalla
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Fútbol Sala")

# Colores
white = (255, 255, 255)
blue = (0, 0, 255)
red = (255, 0, 0)
black = (0, 0, 0)

# Jugadores
player_size = 40
team1_color = blue
team2_color = red
players = []

# Balón
ball_radius = 10
ball_color = black
ball = {
    "pos": [screen_width // 2, screen_height // 2],
    "velocity": [0, 0]
}

# Función para crear un jugador cuadrado
def create_square_player(x, y, color):
    return {
        "rect": pygame.Rect(x, y, player_size, player_size),
        "color": color,
        "shape": "square"
    }

# Función para crear un jugador triángulo
def create_triangle_player(x, y, color):
    return {
        "pos": [x, y],
        "color": color,
        "shape": "triangle"
    }

# Crear jugadores
for i in range(5):
    players.append(create_square_player(100, 100 + i * 80, team1_color))
    players.append(create_triangle_player(600, 100 + i * 80, team2_color))

# Bucle principal del juego
selected_player = None
dragging = False
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                for player in players:
                    if player["shape"] == "square" and player["rect"].collidepoint(event.pos):
                        selected_player = player
                        dragging = True
                    elif player["shape"] == "triangle":
                        distance = pygame.math.Vector2(player["pos"][0] - event.pos[0], player["pos"][1] - event.pos[1]).length()
                        if distance <= player_size:
                            selected_player = player
                            dragging = True
        elif event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:
                dragging = False
                selected_player = None

    if dragging and selected_player is not None:
        if selected_player["shape"] == "square":
            selected_player["rect"].center = pygame.mouse.get_pos()
        elif selected_player["shape"] == "triangle":
            selected_player["pos"] = list(pygame.mouse.get_pos())

    # Actualizar la posición del balón
    ball["pos"][0] += ball["velocity"][0]
    ball["pos"][1] += ball["velocity"][1]

    # Dibujar el campo y los arcos
    screen.fill(white)

    # Líneas del campo
    pygame.draw.rect(screen, white, (50, 50, screen_width - 100, screen_height - 100), 2)
    pygame.draw.lines(screen, white, False, [(screen_width // 2, 50), (screen_width // 2, screen_height - 50)], 2)
    
    # Arcos
    pygame.draw.arc(screen, white, (50, (screen_height // 2) - 50, 100, 100), 0, math.pi, 2)
    pygame.draw.arc(screen, white, (screen_width - 150, (screen_height // 2) - 50, 100, 100), 0, math.pi, 2)

    # Dibujar el balón
    pygame.draw.circle(screen, ball_color, (int(ball["pos"][0]), int(ball["pos"][1])), ball_radius)

    # Dibujar jugadores
    for player in players:
        if player["shape"] == "square":
            pygame.draw.rect(screen, player["color"], player["rect"])
        elif player["shape"] == "triangle":
            x, y = player["pos"]
            pygame.draw.polygon(screen, player["color"], [
                (x, y - player_size),
                (x - player_size / 2, y + player_size / 2),
                (x + player_size / 2, y + player_size / 2)
            ])

    pygame.display.flip()

pygame.quit()
sys.exit()
